#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Course_page
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Course paper")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertАвтомобиль(Автомобиль instance);
    partial void UpdateАвтомобиль(Автомобиль instance);
    partial void DeleteАвтомобиль(Автомобиль instance);
    partial void InsertКлиенты(Клиенты instance);
    partial void UpdateКлиенты(Клиенты instance);
    partial void DeleteКлиенты(Клиенты instance);
    partial void InsertРемонт(Ремонт instance);
    partial void UpdateРемонт(Ремонт instance);
    partial void DeleteРемонт(Ремонт instance);
    partial void InsertСпециалисты(Специалисты instance);
    partial void UpdateСпециалисты(Специалисты instance);
    partial void DeleteСпециалисты(Специалисты instance);
    partial void InsertДоговор(Договор instance);
    partial void UpdateДоговор(Договор instance);
    partial void DeleteДоговор(Договор instance);
    partial void InsertИзрасходованныеЗапчасти(ИзрасходованныеЗапчасти instance);
    partial void UpdateИзрасходованныеЗапчасти(ИзрасходованныеЗапчасти instance);
    partial void DeleteИзрасходованныеЗапчасти(ИзрасходованныеЗапчасти instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::Course_page.Properties.Settings.Default.Course_paperConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Автомобиль> Автомобиль
		{
			get
			{
				return this.GetTable<Автомобиль>();
			}
		}
		
		public System.Data.Linq.Table<Клиенты> Клиенты
		{
			get
			{
				return this.GetTable<Клиенты>();
			}
		}
		
		public System.Data.Linq.Table<Ремонт> Ремонт
		{
			get
			{
				return this.GetTable<Ремонт>();
			}
		}
		
		public System.Data.Linq.Table<Специалисты> Специалисты
		{
			get
			{
				return this.GetTable<Специалисты>();
			}
		}
		
		public System.Data.Linq.Table<Договор> Договор
		{
			get
			{
				return this.GetTable<Договор>();
			}
		}
		
		public System.Data.Linq.Table<ИзрасходованныеЗапчасти> ИзрасходованныеЗапчасти
		{
			get
			{
				return this.GetTable<ИзрасходованныеЗапчасти>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Автомобиль")]
	public partial class Автомобиль : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Марка;
		
		private string _Модель;
		
		private string _НомернойЗнак;
		
		private string _VIN_код;
		
		private int _КодКлиента;
		
		private int _КодАвтомобиля;
		
		private EntitySet<Договор> _Договор;
		
		private EntityRef<Клиенты> _Клиенты;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnМаркаChanging(string value);
    partial void OnМаркаChanged();
    partial void OnМодельChanging(string value);
    partial void OnМодельChanged();
    partial void OnНомернойЗнакChanging(string value);
    partial void OnНомернойЗнакChanged();
    partial void OnVIN_кодChanging(string value);
    partial void OnVIN_кодChanged();
    partial void OnКодКлиентаChanging(int value);
    partial void OnКодКлиентаChanged();
    partial void OnКодАвтомобиляChanging(int value);
    partial void OnКодАвтомобиляChanged();
    #endregion
		
		public Автомобиль()
		{
			this._Договор = new EntitySet<Договор>(new Action<Договор>(this.attach_Договор), new Action<Договор>(this.detach_Договор));
			this._Клиенты = default(EntityRef<Клиенты>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Марка", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Марка
		{
			get
			{
				return this._Марка;
			}
			set
			{
				if ((this._Марка != value))
				{
					this.OnМаркаChanging(value);
					this.SendPropertyChanging();
					this._Марка = value;
					this.SendPropertyChanged("Марка");
					this.OnМаркаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Модель", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Модель
		{
			get
			{
				return this._Модель;
			}
			set
			{
				if ((this._Модель != value))
				{
					this.OnМодельChanging(value);
					this.SendPropertyChanging();
					this._Модель = value;
					this.SendPropertyChanged("Модель");
					this.OnМодельChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_НомернойЗнак", DbType="NVarChar(50)")]
		public string НомернойЗнак
		{
			get
			{
				return this._НомернойЗнак;
			}
			set
			{
				if ((this._НомернойЗнак != value))
				{
					this.OnНомернойЗнакChanging(value);
					this.SendPropertyChanging();
					this._НомернойЗнак = value;
					this.SendPropertyChanged("НомернойЗнак");
					this.OnНомернойЗнакChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VIN_код", DbType="NVarChar(17) NOT NULL", CanBeNull=false)]
		public string VIN_код
		{
			get
			{
				return this._VIN_код;
			}
			set
			{
				if ((this._VIN_код != value))
				{
					this.OnVIN_кодChanging(value);
					this.SendPropertyChanging();
					this._VIN_код = value;
					this.SendPropertyChanged("VIN_код");
					this.OnVIN_кодChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_КодКлиента", DbType="Int NOT NULL")]
		public int КодКлиента
		{
			get
			{
				return this._КодКлиента;
			}
			set
			{
				if ((this._КодКлиента != value))
				{
					if (this._Клиенты.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnКодКлиентаChanging(value);
					this.SendPropertyChanging();
					this._КодКлиента = value;
					this.SendPropertyChanged("КодКлиента");
					this.OnКодКлиентаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_КодАвтомобиля", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int КодАвтомобиля
		{
			get
			{
				return this._КодАвтомобиля;
			}
			set
			{
				if ((this._КодАвтомобиля != value))
				{
					this.OnКодАвтомобиляChanging(value);
					this.SendPropertyChanging();
					this._КодАвтомобиля = value;
					this.SendPropertyChanged("КодАвтомобиля");
					this.OnКодАвтомобиляChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Автомобиль_Договор", Storage="_Договор", ThisKey="КодАвтомобиля", OtherKey="КодАвтомобиля")]
		public EntitySet<Договор> Договор
		{
			get
			{
				return this._Договор;
			}
			set
			{
				this._Договор.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Клиенты_Автомобиль", Storage="_Клиенты", ThisKey="КодКлиента", OtherKey="КодКлиента", IsForeignKey=true)]
		public Клиенты Клиенты
		{
			get
			{
				return this._Клиенты.Entity;
			}
			set
			{
				Клиенты previousValue = this._Клиенты.Entity;
				if (((previousValue != value) 
							|| (this._Клиенты.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Клиенты.Entity = null;
						previousValue.Автомобиль.Remove(this);
					}
					this._Клиенты.Entity = value;
					if ((value != null))
					{
						value.Автомобиль.Add(this);
						this._КодКлиента = value.КодКлиента;
					}
					else
					{
						this._КодКлиента = default(int);
					}
					this.SendPropertyChanged("Клиенты");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Договор(Договор entity)
		{
			this.SendPropertyChanging();
			entity.Автомобиль = this;
		}
		
		private void detach_Договор(Договор entity)
		{
			this.SendPropertyChanging();
			entity.Автомобиль = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Клиенты")]
	public partial class Клиенты : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _КодКлиента;
		
		private string _Фамилия;
		
		private string _Имя;
		
		private string _Отчество;
		
		private string _Телефон;
		
		private string _Адрес;
		
		private EntitySet<Автомобиль> _Автомобиль;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnКодКлиентаChanging(int value);
    partial void OnКодКлиентаChanged();
    partial void OnФамилияChanging(string value);
    partial void OnФамилияChanged();
    partial void OnИмяChanging(string value);
    partial void OnИмяChanged();
    partial void OnОтчествоChanging(string value);
    partial void OnОтчествоChanged();
    partial void OnТелефонChanging(string value);
    partial void OnТелефонChanged();
    partial void OnАдресChanging(string value);
    partial void OnАдресChanged();
    #endregion
		
		public Клиенты()
		{
			this._Автомобиль = new EntitySet<Автомобиль>(new Action<Автомобиль>(this.attach_Автомобиль), new Action<Автомобиль>(this.detach_Автомобиль));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_КодКлиента", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int КодКлиента
		{
			get
			{
				return this._КодКлиента;
			}
			set
			{
				if ((this._КодКлиента != value))
				{
					this.OnКодКлиентаChanging(value);
					this.SendPropertyChanging();
					this._КодКлиента = value;
					this.SendPropertyChanged("КодКлиента");
					this.OnКодКлиентаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Фамилия", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Фамилия
		{
			get
			{
				return this._Фамилия;
			}
			set
			{
				if ((this._Фамилия != value))
				{
					this.OnФамилияChanging(value);
					this.SendPropertyChanging();
					this._Фамилия = value;
					this.SendPropertyChanged("Фамилия");
					this.OnФамилияChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Имя", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Имя
		{
			get
			{
				return this._Имя;
			}
			set
			{
				if ((this._Имя != value))
				{
					this.OnИмяChanging(value);
					this.SendPropertyChanging();
					this._Имя = value;
					this.SendPropertyChanged("Имя");
					this.OnИмяChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Отчество", DbType="NVarChar(MAX)")]
		public string Отчество
		{
			get
			{
				return this._Отчество;
			}
			set
			{
				if ((this._Отчество != value))
				{
					this.OnОтчествоChanging(value);
					this.SendPropertyChanging();
					this._Отчество = value;
					this.SendPropertyChanged("Отчество");
					this.OnОтчествоChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Телефон", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Телефон
		{
			get
			{
				return this._Телефон;
			}
			set
			{
				if ((this._Телефон != value))
				{
					this.OnТелефонChanging(value);
					this.SendPropertyChanging();
					this._Телефон = value;
					this.SendPropertyChanged("Телефон");
					this.OnТелефонChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Адрес", DbType="NVarChar(MAX)")]
		public string Адрес
		{
			get
			{
				return this._Адрес;
			}
			set
			{
				if ((this._Адрес != value))
				{
					this.OnАдресChanging(value);
					this.SendPropertyChanging();
					this._Адрес = value;
					this.SendPropertyChanged("Адрес");
					this.OnАдресChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Клиенты_Автомобиль", Storage="_Автомобиль", ThisKey="КодКлиента", OtherKey="КодКлиента")]
		public EntitySet<Автомобиль> Автомобиль
		{
			get
			{
				return this._Автомобиль;
			}
			set
			{
				this._Автомобиль.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Автомобиль(Автомобиль entity)
		{
			this.SendPropertyChanging();
			entity.Клиенты = this;
		}
		
		private void detach_Автомобиль(Автомобиль entity)
		{
			this.SendPropertyChanging();
			entity.Клиенты = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ремонт")]
	public partial class Ремонт : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _КодРемонта;
		
		private long _КодДоговора;
		
		private string _Название;
		
		private System.Nullable<decimal> _ПредварительнаяСтоимость;
		
		private EntityRef<Договор> _Договор;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnКодРемонтаChanging(int value);
    partial void OnКодРемонтаChanged();
    partial void OnКодДоговораChanging(long value);
    partial void OnКодДоговораChanged();
    partial void OnНазваниеChanging(string value);
    partial void OnНазваниеChanged();
    partial void OnПредварительнаяСтоимостьChanging(System.Nullable<decimal> value);
    partial void OnПредварительнаяСтоимостьChanged();
    #endregion
		
		public Ремонт()
		{
			this._Договор = default(EntityRef<Договор>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_КодРемонта", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int КодРемонта
		{
			get
			{
				return this._КодРемонта;
			}
			set
			{
				if ((this._КодРемонта != value))
				{
					this.OnКодРемонтаChanging(value);
					this.SendPropertyChanging();
					this._КодРемонта = value;
					this.SendPropertyChanged("КодРемонта");
					this.OnКодРемонтаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_КодДоговора", DbType="BigInt NOT NULL")]
		public long КодДоговора
		{
			get
			{
				return this._КодДоговора;
			}
			set
			{
				if ((this._КодДоговора != value))
				{
					if (this._Договор.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnКодДоговораChanging(value);
					this.SendPropertyChanging();
					this._КодДоговора = value;
					this.SendPropertyChanged("КодДоговора");
					this.OnКодДоговораChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Название", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Название
		{
			get
			{
				return this._Название;
			}
			set
			{
				if ((this._Название != value))
				{
					this.OnНазваниеChanging(value);
					this.SendPropertyChanging();
					this._Название = value;
					this.SendPropertyChanged("Название");
					this.OnНазваниеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ПредварительнаяСтоимость", DbType="Money")]
		public System.Nullable<decimal> ПредварительнаяСтоимость
		{
			get
			{
				return this._ПредварительнаяСтоимость;
			}
			set
			{
				if ((this._ПредварительнаяСтоимость != value))
				{
					this.OnПредварительнаяСтоимостьChanging(value);
					this.SendPropertyChanging();
					this._ПредварительнаяСтоимость = value;
					this.SendPropertyChanged("ПредварительнаяСтоимость");
					this.OnПредварительнаяСтоимостьChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Договор_Ремонт", Storage="_Договор", ThisKey="КодДоговора", OtherKey="КодДоговора", IsForeignKey=true)]
		public Договор Договор
		{
			get
			{
				return this._Договор.Entity;
			}
			set
			{
				Договор previousValue = this._Договор.Entity;
				if (((previousValue != value) 
							|| (this._Договор.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Договор.Entity = null;
						previousValue.Ремонт.Remove(this);
					}
					this._Договор.Entity = value;
					if ((value != null))
					{
						value.Ремонт.Add(this);
						this._КодДоговора = value.КодДоговора;
					}
					else
					{
						this._КодДоговора = default(long);
					}
					this.SendPropertyChanged("Договор");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Специалисты")]
	public partial class Специалисты : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _КодСпециалиста;
		
		private string _Фамилия;
		
		private string _Имя;
		
		private string _Отчество;
		
		private string _Квалификация;
		
		private EntitySet<Договор> _Договор;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnКодСпециалистаChanging(int value);
    partial void OnКодСпециалистаChanged();
    partial void OnФамилияChanging(string value);
    partial void OnФамилияChanged();
    partial void OnИмяChanging(string value);
    partial void OnИмяChanged();
    partial void OnОтчествоChanging(string value);
    partial void OnОтчествоChanged();
    partial void OnКвалификацияChanging(string value);
    partial void OnКвалификацияChanged();
    #endregion
		
		public Специалисты()
		{
			this._Договор = new EntitySet<Договор>(new Action<Договор>(this.attach_Договор), new Action<Договор>(this.detach_Договор));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_КодСпециалиста", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int КодСпециалиста
		{
			get
			{
				return this._КодСпециалиста;
			}
			set
			{
				if ((this._КодСпециалиста != value))
				{
					this.OnКодСпециалистаChanging(value);
					this.SendPropertyChanging();
					this._КодСпециалиста = value;
					this.SendPropertyChanged("КодСпециалиста");
					this.OnКодСпециалистаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Фамилия", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Фамилия
		{
			get
			{
				return this._Фамилия;
			}
			set
			{
				if ((this._Фамилия != value))
				{
					this.OnФамилияChanging(value);
					this.SendPropertyChanging();
					this._Фамилия = value;
					this.SendPropertyChanged("Фамилия");
					this.OnФамилияChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Имя", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Имя
		{
			get
			{
				return this._Имя;
			}
			set
			{
				if ((this._Имя != value))
				{
					this.OnИмяChanging(value);
					this.SendPropertyChanging();
					this._Имя = value;
					this.SendPropertyChanged("Имя");
					this.OnИмяChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Отчество", DbType="NVarChar(MAX)")]
		public string Отчество
		{
			get
			{
				return this._Отчество;
			}
			set
			{
				if ((this._Отчество != value))
				{
					this.OnОтчествоChanging(value);
					this.SendPropertyChanging();
					this._Отчество = value;
					this.SendPropertyChanged("Отчество");
					this.OnОтчествоChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Квалификация", DbType="NVarChar(MAX)")]
		public string Квалификация
		{
			get
			{
				return this._Квалификация;
			}
			set
			{
				if ((this._Квалификация != value))
				{
					this.OnКвалификацияChanging(value);
					this.SendPropertyChanging();
					this._Квалификация = value;
					this.SendPropertyChanged("Квалификация");
					this.OnКвалификацияChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Специалисты_Договор", Storage="_Договор", ThisKey="КодСпециалиста", OtherKey="КодСпециалиста")]
		public EntitySet<Договор> Договор
		{
			get
			{
				return this._Договор;
			}
			set
			{
				this._Договор.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Договор(Договор entity)
		{
			this.SendPropertyChanging();
			entity.Специалисты = this;
		}
		
		private void detach_Договор(Договор entity)
		{
			this.SendPropertyChanging();
			entity.Специалисты = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Договор")]
	public partial class Договор : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _КодДоговора;
		
		private int _КодСпециалиста;
		
		private int _КодАвтомобиля;
		
		private System.Nullable<System.DateTime> _ДатаРемонта;
		
		private string _ВремяРемонта;
		
		private decimal _СтоимостьРемонта;
		
		private string _ВидНеисправности;
		
		private EntitySet<Ремонт> _Ремонт;
		
		private EntitySet<ИзрасходованныеЗапчасти> _ИзрасходованныеЗапчасти;
		
		private EntityRef<Автомобиль> _Автомобиль;
		
		private EntityRef<Специалисты> _Специалисты;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnКодДоговораChanging(long value);
    partial void OnКодДоговораChanged();
    partial void OnКодСпециалистаChanging(int value);
    partial void OnКодСпециалистаChanged();
    partial void OnКодАвтомобиляChanging(int value);
    partial void OnКодАвтомобиляChanged();
    partial void OnДатаРемонтаChanging(System.Nullable<System.DateTime> value);
    partial void OnДатаРемонтаChanged();
    partial void OnВремяРемонтаChanging(string value);
    partial void OnВремяРемонтаChanged();
    partial void OnСтоимостьРемонтаChanging(decimal value);
    partial void OnСтоимостьРемонтаChanged();
    partial void OnВидНеисправностиChanging(string value);
    partial void OnВидНеисправностиChanged();
    #endregion
		
		public Договор()
		{
			this._Ремонт = new EntitySet<Ремонт>(new Action<Ремонт>(this.attach_Ремонт), new Action<Ремонт>(this.detach_Ремонт));
			this._ИзрасходованныеЗапчасти = new EntitySet<ИзрасходованныеЗапчасти>(new Action<ИзрасходованныеЗапчасти>(this.attach_ИзрасходованныеЗапчасти), new Action<ИзрасходованныеЗапчасти>(this.detach_ИзрасходованныеЗапчасти));
			this._Автомобиль = default(EntityRef<Автомобиль>);
			this._Специалисты = default(EntityRef<Специалисты>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_КодДоговора", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long КодДоговора
		{
			get
			{
				return this._КодДоговора;
			}
			set
			{
				if ((this._КодДоговора != value))
				{
					this.OnКодДоговораChanging(value);
					this.SendPropertyChanging();
					this._КодДоговора = value;
					this.SendPropertyChanged("КодДоговора");
					this.OnКодДоговораChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_КодСпециалиста", DbType="Int NOT NULL")]
		public int КодСпециалиста
		{
			get
			{
				return this._КодСпециалиста;
			}
			set
			{
				if ((this._КодСпециалиста != value))
				{
					if (this._Специалисты.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnКодСпециалистаChanging(value);
					this.SendPropertyChanging();
					this._КодСпециалиста = value;
					this.SendPropertyChanged("КодСпециалиста");
					this.OnКодСпециалистаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_КодАвтомобиля", DbType="Int NOT NULL")]
		public int КодАвтомобиля
		{
			get
			{
				return this._КодАвтомобиля;
			}
			set
			{
				if ((this._КодАвтомобиля != value))
				{
					if (this._Автомобиль.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnКодАвтомобиляChanging(value);
					this.SendPropertyChanging();
					this._КодАвтомобиля = value;
					this.SendPropertyChanged("КодАвтомобиля");
					this.OnКодАвтомобиляChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ДатаРемонта", DbType="Date")]
		public System.Nullable<System.DateTime> ДатаРемонта
		{
			get
			{
				return this._ДатаРемонта;
			}
			set
			{
				if ((this._ДатаРемонта != value))
				{
					this.OnДатаРемонтаChanging(value);
					this.SendPropertyChanging();
					this._ДатаРемонта = value;
					this.SendPropertyChanged("ДатаРемонта");
					this.OnДатаРемонтаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ВремяРемонта", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string ВремяРемонта
		{
			get
			{
				return this._ВремяРемонта;
			}
			set
			{
				if ((this._ВремяРемонта != value))
				{
					this.OnВремяРемонтаChanging(value);
					this.SendPropertyChanging();
					this._ВремяРемонта = value;
					this.SendPropertyChanged("ВремяРемонта");
					this.OnВремяРемонтаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_СтоимостьРемонта", DbType="Money NOT NULL")]
		public decimal СтоимостьРемонта
		{
			get
			{
				return this._СтоимостьРемонта;
			}
			set
			{
				if ((this._СтоимостьРемонта != value))
				{
					this.OnСтоимостьРемонтаChanging(value);
					this.SendPropertyChanging();
					this._СтоимостьРемонта = value;
					this.SendPropertyChanged("СтоимостьРемонта");
					this.OnСтоимостьРемонтаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ВидНеисправности", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ВидНеисправности
		{
			get
			{
				return this._ВидНеисправности;
			}
			set
			{
				if ((this._ВидНеисправности != value))
				{
					this.OnВидНеисправностиChanging(value);
					this.SendPropertyChanging();
					this._ВидНеисправности = value;
					this.SendPropertyChanged("ВидНеисправности");
					this.OnВидНеисправностиChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Договор_Ремонт", Storage="_Ремонт", ThisKey="КодДоговора", OtherKey="КодДоговора")]
		public EntitySet<Ремонт> Ремонт
		{
			get
			{
				return this._Ремонт;
			}
			set
			{
				this._Ремонт.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Договор_ИзрасходованныеЗапчасти", Storage="_ИзрасходованныеЗапчасти", ThisKey="КодДоговора", OtherKey="КодДоговора")]
		public EntitySet<ИзрасходованныеЗапчасти> ИзрасходованныеЗапчасти
		{
			get
			{
				return this._ИзрасходованныеЗапчасти;
			}
			set
			{
				this._ИзрасходованныеЗапчасти.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Автомобиль_Договор", Storage="_Автомобиль", ThisKey="КодАвтомобиля", OtherKey="КодАвтомобиля", IsForeignKey=true)]
		public Автомобиль Автомобиль
		{
			get
			{
				return this._Автомобиль.Entity;
			}
			set
			{
				Автомобиль previousValue = this._Автомобиль.Entity;
				if (((previousValue != value) 
							|| (this._Автомобиль.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Автомобиль.Entity = null;
						previousValue.Договор.Remove(this);
					}
					this._Автомобиль.Entity = value;
					if ((value != null))
					{
						value.Договор.Add(this);
						this._КодАвтомобиля = value.КодАвтомобиля;
					}
					else
					{
						this._КодАвтомобиля = default(int);
					}
					this.SendPropertyChanged("Автомобиль");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Специалисты_Договор", Storage="_Специалисты", ThisKey="КодСпециалиста", OtherKey="КодСпециалиста", IsForeignKey=true)]
		public Специалисты Специалисты
		{
			get
			{
				return this._Специалисты.Entity;
			}
			set
			{
				Специалисты previousValue = this._Специалисты.Entity;
				if (((previousValue != value) 
							|| (this._Специалисты.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Специалисты.Entity = null;
						previousValue.Договор.Remove(this);
					}
					this._Специалисты.Entity = value;
					if ((value != null))
					{
						value.Договор.Add(this);
						this._КодСпециалиста = value.КодСпециалиста;
					}
					else
					{
						this._КодСпециалиста = default(int);
					}
					this.SendPropertyChanged("Специалисты");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ремонт(Ремонт entity)
		{
			this.SendPropertyChanging();
			entity.Договор = this;
		}
		
		private void detach_Ремонт(Ремонт entity)
		{
			this.SendPropertyChanging();
			entity.Договор = null;
		}
		
		private void attach_ИзрасходованныеЗапчасти(ИзрасходованныеЗапчасти entity)
		{
			this.SendPropertyChanging();
			entity.Договор = this;
		}
		
		private void detach_ИзрасходованныеЗапчасти(ИзрасходованныеЗапчасти entity)
		{
			this.SendPropertyChanging();
			entity.Договор = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ИзрасходованныеЗапчасти")]
	public partial class ИзрасходованныеЗапчасти : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _КодИзрасходованныхЗапчастей;
		
		private long _КодДоговора;
		
		private string _Детали;
		
		private decimal _Стоимость;
		
		private EntityRef<Договор> _Договор;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnКодИзрасходованныхЗапчастейChanging(int value);
    partial void OnКодИзрасходованныхЗапчастейChanged();
    partial void OnКодДоговораChanging(long value);
    partial void OnКодДоговораChanged();
    partial void OnДеталиChanging(string value);
    partial void OnДеталиChanged();
    partial void OnСтоимостьChanging(decimal value);
    partial void OnСтоимостьChanged();
    #endregion
		
		public ИзрасходованныеЗапчасти()
		{
			this._Договор = default(EntityRef<Договор>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_КодИзрасходованныхЗапчастей", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int КодИзрасходованныхЗапчастей
		{
			get
			{
				return this._КодИзрасходованныхЗапчастей;
			}
			set
			{
				if ((this._КодИзрасходованныхЗапчастей != value))
				{
					this.OnКодИзрасходованныхЗапчастейChanging(value);
					this.SendPropertyChanging();
					this._КодИзрасходованныхЗапчастей = value;
					this.SendPropertyChanged("КодИзрасходованныхЗапчастей");
					this.OnКодИзрасходованныхЗапчастейChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_КодДоговора", DbType="BigInt NOT NULL")]
		public long КодДоговора
		{
			get
			{
				return this._КодДоговора;
			}
			set
			{
				if ((this._КодДоговора != value))
				{
					if (this._Договор.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnКодДоговораChanging(value);
					this.SendPropertyChanging();
					this._КодДоговора = value;
					this.SendPropertyChanged("КодДоговора");
					this.OnКодДоговораChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Детали", DbType="NVarChar(MAX)")]
		public string Детали
		{
			get
			{
				return this._Детали;
			}
			set
			{
				if ((this._Детали != value))
				{
					this.OnДеталиChanging(value);
					this.SendPropertyChanging();
					this._Детали = value;
					this.SendPropertyChanged("Детали");
					this.OnДеталиChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Стоимость", DbType="Money NOT NULL")]
		public decimal Стоимость
		{
			get
			{
				return this._Стоимость;
			}
			set
			{
				if ((this._Стоимость != value))
				{
					this.OnСтоимостьChanging(value);
					this.SendPropertyChanging();
					this._Стоимость = value;
					this.SendPropertyChanged("Стоимость");
					this.OnСтоимостьChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Договор_ИзрасходованныеЗапчасти", Storage="_Договор", ThisKey="КодДоговора", OtherKey="КодДоговора", IsForeignKey=true)]
		public Договор Договор
		{
			get
			{
				return this._Договор.Entity;
			}
			set
			{
				Договор previousValue = this._Договор.Entity;
				if (((previousValue != value) 
							|| (this._Договор.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Договор.Entity = null;
						previousValue.ИзрасходованныеЗапчасти.Remove(this);
					}
					this._Договор.Entity = value;
					if ((value != null))
					{
						value.ИзрасходованныеЗапчасти.Add(this);
						this._КодДоговора = value.КодДоговора;
					}
					else
					{
						this._КодДоговора = default(long);
					}
					this.SendPropertyChanged("Договор");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
